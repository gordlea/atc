// This file was generated by counterfeiter
package dbfakes

import (
	"sync"

	"github.com/concourse/atc/db"
)

type FakeTeamDBFactory struct {
	GetTeamDBByIdStub        func(int) db.TeamDB
	getTeamDBByIdMutex       sync.RWMutex
	getTeamDBByIdArgsForCall []struct {
		arg1 int
	}
	getTeamDBByIdReturns struct {
		result1 db.TeamDB
	}
	GetTeamDBByNameStub        func(string) (db.TeamDB, error)
	getTeamDBByNameMutex       sync.RWMutex
	getTeamDBByNameArgsForCall []struct {
		arg1 string
	}
	getTeamDBByNameReturns struct {
		result1 db.TeamDB
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTeamDBFactory) GetTeamDBById(arg1 int) db.TeamDB {
	fake.getTeamDBByIdMutex.Lock()
	fake.getTeamDBByIdArgsForCall = append(fake.getTeamDBByIdArgsForCall, struct {
		arg1 int
	}{arg1})
	fake.recordInvocation("GetTeamDBById", []interface{}{arg1})
	fake.getTeamDBByIdMutex.Unlock()
	if fake.GetTeamDBByIdStub != nil {
		return fake.GetTeamDBByIdStub(arg1)
	} else {
		return fake.getTeamDBByIdReturns.result1
	}
}

func (fake *FakeTeamDBFactory) GetTeamDBByIdCallCount() int {
	fake.getTeamDBByIdMutex.RLock()
	defer fake.getTeamDBByIdMutex.RUnlock()
	return len(fake.getTeamDBByIdArgsForCall)
}

func (fake *FakeTeamDBFactory) GetTeamDBByIdArgsForCall(i int) int {
	fake.getTeamDBByIdMutex.RLock()
	defer fake.getTeamDBByIdMutex.RUnlock()
	return fake.getTeamDBByIdArgsForCall[i].arg1
}

func (fake *FakeTeamDBFactory) GetTeamDBByIdReturns(result1 db.TeamDB) {
	fake.GetTeamDBByIdStub = nil
	fake.getTeamDBByIdReturns = struct {
		result1 db.TeamDB
	}{result1}
}

func (fake *FakeTeamDBFactory) GetTeamDBByName(arg1 string) (db.TeamDB, error) {
	fake.getTeamDBByNameMutex.Lock()
	fake.getTeamDBByNameArgsForCall = append(fake.getTeamDBByNameArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetTeamDBByName", []interface{}{arg1})
	fake.getTeamDBByNameMutex.Unlock()
	if fake.GetTeamDBByNameStub != nil {
		return fake.GetTeamDBByNameStub(arg1)
	} else {
		return fake.getTeamDBByNameReturns.result1, fake.getTeamDBByNameReturns.result2
	}
}

func (fake *FakeTeamDBFactory) GetTeamDBByNameCallCount() int {
	fake.getTeamDBByNameMutex.RLock()
	defer fake.getTeamDBByNameMutex.RUnlock()
	return len(fake.getTeamDBByNameArgsForCall)
}

func (fake *FakeTeamDBFactory) GetTeamDBByNameArgsForCall(i int) string {
	fake.getTeamDBByNameMutex.RLock()
	defer fake.getTeamDBByNameMutex.RUnlock()
	return fake.getTeamDBByNameArgsForCall[i].arg1
}

func (fake *FakeTeamDBFactory) GetTeamDBByNameReturns(result1 db.TeamDB, result2 error) {
	fake.GetTeamDBByNameStub = nil
	fake.getTeamDBByNameReturns = struct {
		result1 db.TeamDB
		result2 error
	}{result1, result2}
}

func (fake *FakeTeamDBFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getTeamDBByIdMutex.RLock()
	defer fake.getTeamDBByIdMutex.RUnlock()
	fake.getTeamDBByNameMutex.RLock()
	defer fake.getTeamDBByNameMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeTeamDBFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.TeamDBFactory = new(FakeTeamDBFactory)
